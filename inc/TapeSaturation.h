/*
 * Company: ChowDSP
 * Effect Name: Tape Saturation
 * Description: A distortion effect based on a physically-modelled reel-to-reel tape machine.
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#pragma once

#include <Audio.h>
#include <arm_math.h>
#include "Aviate/AudioEffectWrapper.h"

//!s - START_USER_INCLUDES - put your #includes below this line before the matching END
namespace ne_pedal::plugins::tape_saturation
{
class TapeSaturationPlugin;
}
//!e - END_USER_INCLUDES

namespace ChowDSP_TapeSaturation {

//!s - START_USER_EFFECT_TYPES - put your effect types below this line before the matching END
//!e - END_USER_EFFECT_TYPES

class TapeSaturation : public AudioStream, public Aviate::AudioEffectFloat {
public:
    static constexpr unsigned NUM_INPUTS  = 1;
    static constexpr unsigned NUM_OUTPUTS = 1;

    // Some useful aliases
    using AudioBlock    = audio_block_float32_t;
    using AudioDataType = float;

    // List of effect control names
    enum {
        Bypass_e = 0,
        Volume_e = 1,
        Drive_e = 2,
        Saturation_e = 3,
        Bias_e = 4,
        Tone_e = 5,
        Speed_e = 6,
        NUM_CONTROLS
    };

    //!s - START_USER_CLASS_TYPES - put your custom class types below this line before the matching END
    //!e - END_USER_CLASS_TYPES

    TapeSaturation();

    //!s - START_USER_CONSTRUCTORS - put your custom constructors below this line before the matching END
    //!e - END_USER_CONSTRUCTORS

    virtual ~TapeSaturation();

    // Standard EFX interface functions - do not change these declaration
    virtual void update(); // main audio processing loop function
    void mapMidiControl(int parameter, int midiCC, int midiChannel = 0) override;
    void processMidi(int status, int data1, int data2) override;
    void setParam(int paramIndex, float paramValue) override;
    float getUserParamValue(int paramIndex, float normalizedParamValue);
    const char* getName() override;
    const uint8_t* getRblk() override;

    // control value set functions, must take floats between 0.0f and 1.0f - do not change these declarations
    void volume(float value) override;
    void drive(float value);
    void saturation(float value);
    void bias(float value);
    void tone(float value);
    void speed(float value);

    //!s - START_USER_PUBLIC_MEMBERS - put your public members below this line before the matching END
    //!e - END_USER_PUBLIC_MEMBERS

private:
    AudioBlock *m_inputQueueArray[NUM_INPUTS]; // required by AudioStream base class
    int m_midiConfig[NUM_CONTROLS][2]; // stores the midi parameter mapping

    // m_bypass and m_volume are already provided by the base class AudioEffectWrapper or AudioEffectFloat
    float m_drive = 0.0f;
    float m_saturation = 0.0f;
    float m_bias = 0.0f;
    float m_tone = 0.0f;
    float m_speed = 0.0f;

    audio_block_float32_t* m_basicInputCheck(audio_block_float32_t* inputAudioBlock, unsigned outputChannel);

    //!s - START_USER_PRIVATE_MEMBERS - put your private members below this line before the matching END
    std::unique_ptr<ne_pedal::plugins::tape_saturation::TapeSaturationPlugin> plugin;
    //!e - END_USER_PRIVATE_MEMBERS

};

}
